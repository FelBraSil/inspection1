import { Mongo } from 'meteor/mongo';
import SimpleSchema from 'simpl-schema';
import { Images } from './images.js';
import { MQTTcollection } from '/lib/collections/collections.js';
import { Config } from '/lib/config/config.js';  
import { ModbusDevices } from '/lib/collections/dolf/ModbusDevices.js';
import { AmpDevices } from '/lib/collections/amp/ampcollection.js';


SimpleSchema.extendOptions(['autoform']);

export const PollingDevices = new Mongo.Collection('pollingdevices');

PollingDevices.allow({
    insert: function(){
        return true;
    },
    update: function(){
        return true;
    },
    remove: function(){
        return true;
    }
});


pollingDevicesSchema = new SimpleSchema({
  devicename: {
      type: String,
      label: 'Device Name',
      optional: false,
  },
  config: {
      type: String,
      label: 'Configuration Setup',
      regEx: SimpleSchema.RegEx.Id,
      optional: false,
  },
  ip: {
      type: String,
      regEx: SimpleSchema.RegEx.IPv4,
      label: 'IP',
      optional: false,
  },
  port: {
      type: Number,
      label: 'Port',
      min: 1,
      max: 65534,
      defaultValue: 5000,
      optional: false,
  },
  sitenum: {
      type: Number,
      label: 'Site Number',
      min: 0,
      max: 999999,
      defaultValue: 0,
      optional: false,
  },
  details: {
      type: String,
      label: 'Details',
      optional: true,
      autoform: {
         type: 'textarea'
      }
  },
  subdevices: {
    type: String,
    label: "Subdevices",
    autoValue: function(){
        return "0";
    },
    autoform:{
        type: "hidden",
    }
  },
  pollingstate: {
    type: Number,
    label: "pollingstate",
    autoValue: function(){
        return 1;
    },
    autoform:{
        type: "hidden",
    }
  },
  deploy: {
    type: Boolean,
    label: "Deploy",
    autoValue: function(){
        return true;
    },
    autoform:{
        type: "hidden",
    }
  },
  setup: {
      type: Boolean,
      optional: false,
      label: "Set Up",
      defaultValue: false,
  },
  isSetup: {
      type: Boolean,
      optional: false,
      label: "Set Up",
      defaultValue: false,
      autoform:{
          type: "hidden",
      }
  },
  mapx: {
      type: Number,
      label: 'Map X',
      min: 1,
      max: 65534,
      defaultValue: 5000,
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  mapy: {
      type: Number,
      label: 'Map Y',
      min: 1,
      max: 999999,
      defaultValue: 0,
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  mapnum: {
      type: String,
      label: 'Map Number',
      defaultValue: "0",
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  author: {
    type: String,
    label: "Generated by",
    autoValue: function(){
        return this.userId;
    },
    autoform:{
        type: "hidden",
    }
  },
  createdAt:{
      type: Date,
      label: "Created at ",
      autoValue: function(){
        return new Date();
      },
      autoform:{
          type: "hidden",
      }

  },
  dontShowThis: {
      type: Boolean,
      optional: true,
      label: "Delete",
      autoform:{
          type: "hidden",
      },
      defaultValue: false,
  }
} , { tracker: Tracker });

var pollingDevicesSchemaContext = pollingDevicesSchema.newContext("pollingItem");
pollingDevicesSchema.validator();

PollingDevices.attachSchema(pollingDevicesSchema);

if (Meteor.isClient) {
    Meteor.subscribe('pollingdevices');

}

if (Meteor.isServer) {
    Meteor.methods({
            removeTopics: function(id){
                console.log(id);
                MQTTcollection.remove({"topic" : {$regex : ".*"+id+".*"}});
                PollingDevices.update({_id:id},{$set:{dontShowThis:true}});
            },
            reMapElement: function(id,position,mapnum){
                console.log(id);
                console.log(position);
                if(mapnum==null){
                  mapnum="1";
                }
                PollingDevices.update({_id:id},{$set:{mapx:position.mapx, mapy:position.mapy,mapnum:mapnum}});
            },
            removeMapElement: function(id){
                console.log(id);
                let thisCollection;
                if(Config.currentsystem == "DRS" ) thisCollection = PollingDevices;
                if(Config.currentsystem == "DOLF" ) thisCollection = ModbusDevices;
                if(Config.currentsystem == "AMP" ) thisCollection = AmpDevices;
                thisCollection.update({_id:id},{$set:{mapnum:"0"}});
            },
    });

}
