import { Mongo } from 'meteor/mongo';
import SimpleSchema from 'simpl-schema';
import { MQTTcollection } from '/lib/collections/collections.js';

SimpleSchema.extendOptions(['autoform']);

export const AmpDevices = new Mongo.Collection('ampdevices');

AmpDevices.allow({
    insert: function(){
        return true;
    },
    update: function(){
        return true;
    },
    remove: function(){
        return true;
    }
});


AmpDevicesSchema = new SimpleSchema({
  devicename: {
      type: String,
      label: 'Device Name',
      optional: false,
  },
  parent: {
      type: String,
      label: 'Amp Node',
      optional: false,
  },
  branch: {
      type: String,
      label: 'Branch',
      optional: false,
  },
  address: {
      type: Number,
      label: 'Address',
      min: 1,
      max: 65534,
      defaultValue: 1,
      optional: false,
  },
  mbid: {
    type: Number,
    label: "modbus id",
    autoValue: function(){
        return 9999;
    },
    autoform:{
        type: "hidden",
    }
  },
  details: {
      type: String,
      label: 'Details',
      optional: true,
      autoform: {
         type: 'textarea'
      }
  },
  product: {
      type: Number,
      label: 'Product Type',
      optional: true,
      autoform: {
         type: 'select',
         options: function(){
                  return[
                          {label:"Amplifier",value:8},
                          {label:"Amp2",value:9},
                          {label:"Amp3",value:20},
                          {label:"Amp4",value:21},
                          {label:"Amp4",value:22},
                          {label:"Amp4",value:23}
                        ]
                  }
      }
  },
  pollingstate: {
    type: Number,
    label: "pollingstate",
    autoValue: function(){
        return 1;
    },
    autoform:{
        type: "hidden",
    }
  },
  preserve: {
    type: Boolean,
    label: "Deploy",
    autoValue: function(){
        return false;
    },
    autoform:{
        type: "hidden",
    }
  },
  deploy: {
    type: Boolean,
    label: "Deploy",
    autoValue: function(){
        return true;
    },
    autoform:{
        type: "hidden",
    }
  },
  mapx: {
      type: Number,
      label: 'Map X',
      min: 1,
      max: 65534,
      defaultValue: 5000,
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  mapy: {
      type: Number,
      label: 'Map Y',
      min: 1,
      max: 65534,
      defaultValue: 5000,
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  mapnum: {
      type: String,
      label: 'Map Number',
      defaultValue: "0",
      optional: true,
      autoform:{
          type: "hidden",
      }
  },
  author: {
    type: String,
    label: "Generated by",
    autoValue: function(){
        return this.userId;
    },
    autoform:{
        type: "hidden",
    }
  },
  createdAt:{
      type: Date,
      label: "Created at ",
      autoValue: function(){
        return new Date();
      },
      autoform:{
          type: "hidden",
      }

  },
  dontShowThis: {
      type: Boolean,
      optional: true,
      label: "Delete",
      autoform:{
          type: "hidden",
      },
      defaultValue: false,
  }
} , { tracker: Tracker });

var AmpDevicesSchemaContext = AmpDevicesSchema.newContext("pollingItem");
AmpDevicesSchema.validator();

AmpDevices.attachSchema(AmpDevicesSchema);

if (Meteor.isClient) {
    Meteor.subscribe('ampdevices');

}

if (Meteor.isServer) {
    Meteor.methods({
            removeTopicsAmp: function(id){
                console.log(id);
                MQTTcollection.remove({"topic" : {$regex : ".*"+id+".*"}});
                AmpDevices.update({_id:id},{$set:{dontShowThis:true}});
            },
            reMapElementAmp: function(id,position,mapnum){
                console.log("map amp");
                console.log(id);
                console.log(position);
                if(mapnum==null){
                  mapnum="1";
                }
                AmpDevices.update({_id:id},{$set:{mapx:position.mapx, mapy:position.mapy,mapnum:mapnum}});
            },
            removeMapElementAmp: function(id){
                console.log(id);
                AmpDevices.update({_id:id},{$set:{mapnum:"0"}});
            },
            removeDeviceAmp: function(id){
                console.log(id);
                MQTTcollection.remove({"topic" : {$regex : ".*"+id+".*"}});
                AmpDevices.remove({_id:id});
            },
    });

}
